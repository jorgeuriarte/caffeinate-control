name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Get version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: 🔨 Build application
      run: |
        chmod +x build.sh
        ./build.sh ${{ steps.get_version.outputs.VERSION }}
        
    - name: 📦 Create distributable ZIP
      run: |
        cd build
        zip -r "CaffeinateControl-${{ steps.get_version.outputs.VERSION }}.zip" CaffeinateControl.app
        
    - name: 🧪 Test application
      run: |
        # Verificar que la app se creó correctamente
        test -d "build/CaffeinateControl.app"
        test -f "build/CaffeinateControl.app/Contents/MacOS/CaffeinateControl"
        test -f "build/CaffeinateControl.app/Contents/Info.plist"
        echo "✅ Application structure verified"
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: CaffeinateControl-${{ steps.get_version.outputs.VERSION }}
        path: |
          build/CaffeinateControl-${{ steps.get_version.outputs.VERSION }}.zip
          build/CaffeinateControl.app
        retention-days: 30

  release:
    needs: build
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
    - name: 🔨 Build application for release
      run: |
        chmod +x build.sh
        ./build.sh ${{ steps.get_version.outputs.VERSION }}
        cd build
        zip -r "CaffeinateControl-${{ steps.get_version.outputs.VERSION }}.zip" CaffeinateControl.app
        
    - name: 📋 Generate release notes
      id: release_notes
      run: |
        cat << 'EOF' > release_notes.md
        ## 🎉 CaffeinateControl v${{ steps.get_version.outputs.VERSION }}
        
        ### 📥 Instalación
        1. Descarga `CaffeinateControl-${{ steps.get_version.outputs.VERSION }}.zip`
        2. Descomprime el archivo
        3. Mueve `CaffeinateControl.app` a tu carpeta `/Applications/`
        4. Ejecuta la aplicación
        
        ### ✨ Características
        - 🎯 Control visual de caffeinate desde la barra de estado
        - ⏰ Múltiples duraciones: 15min, 30min, 1h, 2h
        - 🔧 Configuración avanzada de flags de caffeinate
        - 🔔 Sistema de alarmas personalizables
        - 💾 Persistencia de configuración
        
        ### 🔧 Requisitos del Sistema
        - macOS 10.15 (Catalina) o superior
        - Arquitectura Intel x64 o Apple Silicon
        
        ### 🐛 Problemas Conocidos
        Si macOS muestra advertencias de seguridad, ve a `Preferencias del Sistema > Seguridad y Privacidad` y permite la ejecución de la aplicación.
        
        ---
        
        **Checksum SHA256:**
        ```
        $(shasum -a 256 build/CaffeinateControl-${{ steps.get_version.outputs.VERSION }}.zip | cut -d' ' -f1)
        ```
        EOF
        
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "CaffeinateControl v${{ steps.get_version.outputs.VERSION }}"
        body_path: release_notes.md
        files: |
          build/CaffeinateControl-${{ steps.get_version.outputs.VERSION }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}